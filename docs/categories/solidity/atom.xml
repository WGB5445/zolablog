<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>不霁何虹的博客 - Solidity</title>
    <subtitle>一些 Web3.0 和 一些 有趣的事情</subtitle>
    <link href="/categories/solidity/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2022-07-10T00:00:00+00:00</updated>
    <id>/categories/solidity/atom.xml</id>
    <entry xml:lang="en">
        <title>Solidity-1 简要概述</title>
        <published>2022-07-10T00:00:00+00:00</published>
        <updated>2022-07-10T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="/solidity-sample-1/" type="text/html"/>
        <id>/solidity-sample-1/</id>
        
        <content type="html">&lt;p&gt;Solidity 是一种面向合约的高级编程语言，用于实现智能合约。Solidity 受到 C++，Python和JavaScript 的影响，旨在针对以太坊虚拟机（EVM）。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yao-shi-yi-tai-fang&quot;&gt;什么是以太坊？&lt;&#x2F;h2&gt;
&lt;p&gt;以太坊是一个分布式的区块链平台可以运行智能合约，可以编写按照编程运行的应用程序。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;yi-tai-fang-xu-ni-ji-evm&quot;&gt;以太坊虚拟机 （EVM）&lt;&#x2F;h2&gt;
&lt;p&gt;以太坊虚拟机，也称为 EVM ，是以太坊智能合约的运行时环境。以太坊虚拟机专注于提供安全性，并由世界各地的计算机执行不受信任的代码。&lt;&#x2F;p&gt;
&lt;p&gt;EVM专门防止拒绝服务攻击，并确保程序无法访问彼此的状态，确保可以在没有任何潜在干扰的情况下建立通信。&lt;&#x2F;p&gt;
&lt;p&gt;以太坊虚拟机被设计为基于以太坊的智能合约的运行时环境。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-yao-shi-zhi-neng-he-yue&quot;&gt;什么是智能合约？&lt;&#x2F;h2&gt;
&lt;p&gt;智能合约是一种计算机协议，旨在以数字方式促进，验证或执行合同的谈判或履行。智能合约允许在没有第三方的情况下执行可信的交易。这些交易是可跟踪和不可逆的。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;solidity-jian-dan-shi-li&quot;&gt;Solidity 简单示例&lt;&#x2F;h2&gt;
&lt;p&gt;让我们从一个简单的 Solidity 源文件开始。&lt;br &#x2F;&gt;
以下是一个 Solidity 文件的示例&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.0 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;contract SimpleStorage {
&lt;&#x2F;span&gt;&lt;span&gt;   uint storedData;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   function set(uint x) public {
&lt;&#x2F;span&gt;&lt;span&gt;      storedData = x;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;   function get() public view returns (uint) {
&lt;&#x2F;span&gt;&lt;span&gt;      return storedData;
&lt;&#x2F;span&gt;&lt;span&gt;   }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;spdx-xu-ke-zheng-biao-shi-fu&quot;&gt;SPDX 许可证标识符&lt;&#x2F;h3&gt;
&lt;p&gt;第一行是一个 &lt;code&gt;SPDX 许可证标识符&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;如果智能合约的源代码开源，则可以更好地建立对智能合约的信任。由于源代码的可用性总是涉及与版权有关的法律问题，因此Solidity编译器鼓励使用机器可读的SPDX许可证标识符。&lt;&#x2F;p&gt;
&lt;p&gt;每个源文件都应以注释开头，指示其许可证：&lt;&#x2F;p&gt;
&lt;p&gt;&lt;code&gt;&#x2F;&#x2F; SPDX-License-Identifier: MIT&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;编译器不会验证许可证是否属于 SPDX 允许的列表的一部分，但会在字节码元数据中包含提供的字符串。&lt;&#x2F;p&gt;
&lt;p&gt;如果您不想指定许可证或源代码不是开源的，请使用特殊值 &lt;code&gt;UNLICENSED&lt;&#x2F;code&gt;&lt;br &#x2F;&gt;
请注意&lt;code&gt;UNLICENSED&lt;&#x2F;code&gt;（不允许使用，SPDX 许可证列表中不存在）不同于 &lt;code&gt;UNLICENSE&lt;&#x2F;code&gt;（向所有人授予所有权限）&lt;&#x2F;p&gt;
&lt;p&gt;编译器可以在文件级别的任何位置识别注释，但建议将其放在文件的顶部。&lt;&#x2F;p&gt;
&lt;p&gt;有关如何使用 SPDX 许可证标识符的详细信息，请访问 &lt;a href=&quot;https:&#x2F;&#x2F;spdx.org&#x2F;ids-how&quot;&gt;SPDX&lt;&#x2F;a&gt; 网站。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;bian-yi-zhi-shi&quot;&gt;编译指示&lt;&#x2F;h3&gt;
&lt;p&gt;第二行是一个&lt;code&gt;编译指示&lt;&#x2F;code&gt;，它告诉源代码是为 Solidity 版本 0.4.0 或任何更新的版本编写的，这些版本不会将功能分解到（但不包括 0.6.0 版本）。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;he-yue&quot;&gt;合约&lt;&#x2F;h3&gt;
&lt;p&gt;一个合约类似在 C++、Java 中的一个 class ，它可以继承其他的合约或者被其他合约继承&lt;br &#x2F;&gt;
在合约内部可以保存状态变量(可以类比为成员变量)、也可以保存函数(可以类比为成员函数)&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;contract SimpleStorage {
&lt;&#x2F;span&gt;&lt;span&gt;   ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;zhuang-tai-bian-liang-state-variables&quot;&gt;状态变量  State Variables&lt;&#x2F;h3&gt;
&lt;p&gt;状态变量是其值永久存储在合约存储中的变量。&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.0 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract SimpleStorage {
&lt;&#x2F;span&gt;&lt;span&gt;    uint storedData; &#x2F;&#x2F; State variable
&lt;&#x2F;span&gt;&lt;span&gt;    &#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;functions&quot;&gt;functions&lt;&#x2F;h3&gt;
&lt;p&gt;函数是代码的可执行单元。函数通常在合约内部定义，但也可以在合约外部定义。&lt;&#x2F;p&gt;
&lt;p&gt;函数调用可以在内部或外部进行，并且对其他合约具有不同级别的可见性&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.7.1 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract SimpleAuction {
&lt;&#x2F;span&gt;&lt;span&gt;    function bid() public payable { &#x2F;&#x2F; Function
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F; Helper function defined outside of a contract
&lt;&#x2F;span&gt;&lt;span&gt;function helper(uint x) pure returns (uint) {
&lt;&#x2F;span&gt;&lt;span&gt;    return x * 2;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;han-shu-xiu-shi-fu-function-modifiers&quot;&gt;函数修饰符 Function Modifiers&lt;&#x2F;h3&gt;
&lt;p&gt;函数修饰符可用于以声明性方式修改函数的语义&lt;br &#x2F;&gt;
函数不支持重载，修饰符可以被覆盖&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.22 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract Purchase {
&lt;&#x2F;span&gt;&lt;span&gt;    address public seller;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    modifier onlySeller() { &#x2F;&#x2F; Modifier
&lt;&#x2F;span&gt;&lt;span&gt;        require(
&lt;&#x2F;span&gt;&lt;span&gt;            msg.sender == seller,
&lt;&#x2F;span&gt;&lt;span&gt;            &amp;quot;Only seller can call this.&amp;quot;
&lt;&#x2F;span&gt;&lt;span&gt;        );
&lt;&#x2F;span&gt;&lt;span&gt;        _;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    function abort() public view onlySeller { &#x2F;&#x2F; Modifier usage
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;shi-jian-events&quot;&gt;事件 Events&lt;&#x2F;h3&gt;
&lt;p&gt;事件是与 EVM 日志记录工具的便捷接口&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.21 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract SimpleAuction {
&lt;&#x2F;span&gt;&lt;span&gt;    event HighestBidIncreased(address bidder, uint amount); &#x2F;&#x2F; Event
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    function bid() public payable {
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;        emit HighestBidIncreased(msg.sender, msg.value); &#x2F;&#x2F; Triggering event
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;jie-gou-ti-lei-xing-struct-types&quot;&gt;结构体类型 Struct Types&lt;&#x2F;h3&gt;
&lt;p&gt;结构是自定义的类型，可以对多个变量进行分组&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.0 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract Ballot {
&lt;&#x2F;span&gt;&lt;span&gt;    struct Voter { &#x2F;&#x2F; Struct
&lt;&#x2F;span&gt;&lt;span&gt;        uint weight;
&lt;&#x2F;span&gt;&lt;span&gt;        bool voted;
&lt;&#x2F;span&gt;&lt;span&gt;        address delegate;
&lt;&#x2F;span&gt;&lt;span&gt;        uint vote;
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;cuo-wu-error&quot;&gt;错误 Error&lt;&#x2F;h3&gt;
&lt;p&gt;error 允许为故障情况定义描述性名称和数据，error 可以在revert 中使用&lt;br &#x2F;&gt;
这比字符串要便宜很多，同时可以对其他数据编码&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity ^0.8.4;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; Not enough funds for transfer. Requested `requested`,
&lt;&#x2F;span&gt;&lt;span&gt;&#x2F;&#x2F;&#x2F; but only `available` available.
&lt;&#x2F;span&gt;&lt;span&gt;error NotEnoughFunds(uint requested, uint available);
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract Token {
&lt;&#x2F;span&gt;&lt;span&gt;    mapping(address =&amp;gt; uint) balances;
&lt;&#x2F;span&gt;&lt;span&gt;    function transfer(address to, uint amount) public {
&lt;&#x2F;span&gt;&lt;span&gt;        uint balance = balances[msg.sender];
&lt;&#x2F;span&gt;&lt;span&gt;        if (balance &amp;lt; amount)
&lt;&#x2F;span&gt;&lt;span&gt;            revert NotEnoughFunds(amount, balance);
&lt;&#x2F;span&gt;&lt;span&gt;        balances[msg.sender] -= amount;
&lt;&#x2F;span&gt;&lt;span&gt;        balances[to] += amount;
&lt;&#x2F;span&gt;&lt;span&gt;        &#x2F;&#x2F; ...
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;mei-ju-lei-xing-enum-types&quot;&gt;枚举类型  Enum Types&lt;&#x2F;h3&gt;
&lt;p&gt;枚举可用于创建具有一组有限的“常量值”的自定义类型&lt;&#x2F;p&gt;
&lt;pre style=&quot;background-color:#2b303b;color:#c0c5ce;&quot;&gt;&lt;code&gt;&lt;span&gt;&#x2F;&#x2F; SPDX-License-Identifier: GPL-3.0
&lt;&#x2F;span&gt;&lt;span&gt;pragma solidity &amp;gt;=0.4.0 &amp;lt;0.9.0;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;contract Purchase {
&lt;&#x2F;span&gt;&lt;span&gt;    enum State { Created, Locked, Inactive } &#x2F;&#x2F; Enum
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
</content>
        
    </entry>
</feed>
